@model WebDA2.Models.TaiKhoan
@{
    ViewBag.Title = "CapNhatTaiKhoan";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<h1><span class="glyphicon glyphicon-user addtop" aria-hidden="true"></span>&nbsp;&nbsp;Cập nhật tài khoản</h1>
<div id="sub-main">
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-8 col-lg-9">
            <ol class="breadcrumb">
                <li>Hệ thống</li>
                <li>Tài khoản</li>
                <li class="active">Cập nhật</li>
            </ol>
        </div>
        <div class="hidden-xs col-sm-5 col-md-4 col-lg-3 text-right">
            <div class="timecount" id="current-time"></div>
        </div>
    </div>

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }
    <div class="row margin0 space-top">
        <div class="option-h4 text-justify">
            <h4>Cập nhật tài khoản</h4>
            <p>- Bạn đang cập nhật thông tin tài khoản của nhân viên.</p>

            @using (Html.BeginForm("CapNhatTaiKhoan", "TaiKhoanAdmin", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ID_TaiKhoan)

                    <!-- Tên tài khoản -->
                    <div class="form-group">
                        <label class="control-label col-md-3">Tên tài khoản</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.TenDangNhap, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TenDangNhap, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Mật khẩu -->
                    <div class="form-group">
                        <label class="control-label col-md-3">Mật khẩu</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.MatKhau, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MatKhau, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Email -->
                    <div class="form-group">
                        <label class="control-label col-md-3">Email</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Số điện thoại -->
                    <div class="form-group">
                        <label class="control-label col-md-3">Số điện thoại</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.SDT, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SDT, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Trạng thái -->
                    <div class="form-group">
                        <label class="control-label col-md-3">Trạng Thái</label>
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.TrangThai,
                                new SelectList(new List<object>
                                {
                                    new { Value = "true", Text = "Bật" },
                                    new { Value = "false", Text = "Tắt" }
                                }, "Value", "Text", Model.TrangThai.ToString().ToLower()),
                                "Chọn trạng thái",
                                new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TrangThai, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Loại tài khoản -->
                    <div style="margin-left:140px" class="form-group">
                        @Html.LabelFor(model => model.LoaiTaiKhoan, "Loại tài khoản", htmlAttributes: new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-2" })
                        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                            <select name="LoaiTaiKhoan" class="form-control">
                                <option value="">--- Chọn loại tài khoản ---</option>
                                <option value="Admin" @(Model.LoaiTaiKhoan == "Admin" ? "selected" : "")>Admin</option>
                                <option value="NhanVien" @(Model.LoaiTaiKhoan == "NhanVien" ? "selected" : "")>Nhân viên</option>
                                <option value="QuanLy" @(Model.LoaiTaiKhoan == "QuanLy" ? "selected" : "")>Quản lý</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.LoaiTaiKhoan, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!-- Nút submit -->
                    <div class="form-group">
                        <div class="col-md-offset-3 col-md-9">
                            <input type="submit" value="Cập Nhật" class="btn btn-primary btn-lg" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script>
    document.querySelector('select[name="TrangThai"]').addEventListener('change', function () {
        const id = document.querySelector('input[name="ID_TaiKhoan"]').value; // Lấy ID từ hidden input
        const status = this.value === "true"; // Chuyển đổi giá trị thành boolean

        fetch('/Admin/TaiKhoanAdmin/CapNhatTrangThai', { // Đảm bảo URL này đúng
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Lấy token CSRF
            },
            body: JSON.stringify({ id: parseInt(id), TrangThai: status }) // Gửi đúng định dạng JSON
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data.success) {
                    alert(data.message || 'Có lỗi xảy ra khi cập nhật trạng thái.');
                    this.value = status ? "false" : "true"; // Reset trạng thái nếu lỗi
                } else {
                    alert(data.message || 'Cập nhật trạng thái thành công.');
                }
            })
            .catch(error => {
                alert('Không thể kết nối đến server: ' + error.message);
                this.value = status ? "false" : "true"; // Reset trạng thái nếu lỗi
            });
    });
</script>
<style>
    /* Cấu trúc chung của form */
    #sub-main {
        background-color: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
        font-family: 'Arial', sans-serif;
    }

    /* Tiêu đề chính */
    h1 {
        font-size: 26px;
        color: #333;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

        h1 .glyphicon {
            font-size: 28px;
            color: #007bff;
            margin-right: 10px;
        }

    /* Đường dẫn breadcrumb */
    .breadcrumb {
        background-color: transparent;
        margin-bottom: 20px;
        padding: 0;
    }

        .breadcrumb li {
            display: inline;
            font-size: 14px;
            color: #6c757d;
        }

            .breadcrumb li + li:before {
                content: " > ";
                color: #007bff;
            }

        .breadcrumb .active {
            color: #007bff;
        }

    /* Phần các label và input */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: bold;
            color: #333;
            font-size: 16px;
        }

        .form-group .form-control {
            border-radius: 5px;
            border: 1px solid #ccc;
            padding: 10px;
            font-size: 14px;
            width: 100%;
            transition: all 0.3s ease;
        }

            .form-group .form-control:focus {
                border-color: #007bff;
                box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
            }

        .form-group select.form-control {
            background-color: #f8f9fa;
        }

        .form-group .text-danger {
            font-size: 12px;
            color: #e74c3c;
        }

    /* Cải thiện các input button */
    .btn {
        padding: 12px 30px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
        border: none;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
            transform: translateY(-2px);
        }

        .btn-success:active {
            background-color: #1e7e34;
            transform: translateY(2px);
        }

    .btn-a {
        display: block;
        width: 100%;
    }

    /* Các thông báo lỗi */
    .validation-summary-errors {
        background-color: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    /* Cải thiện khoảng cách và vị trí */
    .space-top {
        margin-top: 30px;
    }

    .margin0 {
        margin: 0;
    }

    .text-justify {
        text-align: justify;
    }

    .timecount {
        text-align: center;
        font-size: 16px;
        color: #fff;
        font-weight: bold;
    }

        .timecount small {
            font-size: 14px;
            color: #999;
        }

    /* Định dạng cho các ô chọn trong form */
    select.form-control {
        font-size: 14px;
        padding: 8px 10px; /* Điều chỉnh padding để thu hẹp chiều cao */
        color: #333;
        border: 1px solid #ccc;
        border-radius: 5px;
        height: auto; /* Đảm bảo chiều cao tự động phù hợp */
        box-sizing: border-box; /* Đảm bảo chiều cao bao gồm padding và border */
    }

    /* Định dạng cho các cột trong form */
    .col-md-2,
    .col-sm-4 {
        font-weight: bold;
        color: #333;
    }
</style>

